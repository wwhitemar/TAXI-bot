import os
import sys
import googlemaps.client
from databasee import *
import aiohttp
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.exceptions import Throttled

from aiogram.types import CallbackQuery
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.handler import CancelHandler, current_handler
from aiogram.utils.exceptions import BotBlocked
from aiogram.dispatcher import filters
from aiogram.types import ChatType
from aiogram.types import InputFile
from aiogram.types import ReplyKeyboardRemove
import logging
from yandex_geocoder import Client
from deep_translator import GoogleTranslator
from dotenv import load_dotenv
import menu as keyboard
from yandex_geocoder import Client as YandexGeocoder
from math import radians, sin, cos, sqrt, atan2
from datetime import datetime, timedelta
from geopy.distance import geodesic
from geopy.distance import great_circle
import config
import configparser
import asyncio
import googlemaps

async def schedule_order(order_datetime_str: str):
    order_datetime = datetime.strptime(order_datetime_str, "%Y-%m-%d %H:%M")
    time_diff = (order_datetime - datetime.now()).total_seconds()
    if time_diff > 0:
        await asyncio.sleep(time_diff)
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
order_datetime_str = "2024-08-22 22:22"
asyncio.run(schedule_order(order_datetime_str))

async def send_order_to_nearest_drivers(location_client, location, client_id, destination, lang_client, datetime_str):
    order_datetime = datetime.strptime(datetime_str, "%Y-%m-%d %H:%M")
    time_diff = (order_datetime - datetime.now()).total_seconds()
    if time_diff > 0:
        await asyncio.sleep(time_diff)
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞

logging.basicConfig(level=logging.INFO)

# env
load_dotenv()

API_TOKEN = config.API_TOKEN_CLIENT
YANDEX_GEOCODER_API_KEY = config.YANDEX_GEOCODER_API_KEY
GOOGLE_MAPS_API = config.GOOGLE_MAPS_API
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
client_bot = Bot(token=API_TOKEN)
dp = Dispatcher(client_bot, storage=MemoryStorage())
taxi_bot = Bot(token=config.API_TOKEN_TAXI)



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
clientdb = ClientDB()
driverdb = DriverDB()
orderdb = OrderDB()
langdb = LangDB()
taxiorderdb = Order_Taxi_DB()

def route_google(start,end):
    url = f"https://www.google.com/maps/dir/?api=1&origin={start[0]}+{start[1]}&destination={end[0]}+{end[1]}&travelmode=driveing"
    return url


async def get_address(latitude, longitude):
    async with aiohttp.ClientSession() as session:
        url = f"https://geocode-maps.yandex.ru/1.x/?apikey={YANDEX_GEOCODER_API_KEY}&format=json&geocode={longitude},{latitude}"
        async with session.get(url) as response:
            data = await response.json()
            address = data['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['metaDataProperty']['GeocoderMetaData']['text']
            return address

def translate_text_sync(text,lang):
    try:
        return GoogleTranslator(source='auto', target=lang).translate(text)
    except:
        return GoogleTranslator(source='auto', target=lang).translate_batch(text)
    
async def translate_text(text: str, lang: str) -> str:
    return await asyncio.to_thread(translate_text_sync, text, lang)

async def send_order_to_nearest_drivers(location_client,location, client_id, destination, lang_client,datetime_str):
    order_datetime = datetime.strptime(datetime_str, "%Y-%m-%d %H:%M")

    # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    time_diff = (order_datetime - datetime.now()).total_seconds()
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    latitude, longitude = location_client[0], location_client[1]

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö)
    search_radius = 0.01  # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∏—Å–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ —Ä–∞–¥–∏—É—Å–µ 5 –∫–º –æ—Ç –º–µ—Å—Ç–∞ –∑–∞–∫–∞–∑–∞

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π

    client_coord = clientdb.get_client_lat_long(client_id)
    nearby_drivers = clientdb.get_nearby_active_drivers(latitude, longitude, radius=search_radius)
    if nearby_drivers:
        for driver in nearby_drivers:
            driver_id = driver[0]
            # –û—Ç–ø—Ä–∞–≤–∫–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤–æ–¥–∏—Ç–µ–ª—é
            lang = langdb.get_lang(driver_id)
            await taxi_bot.send_message(driver_id, translate_text("üöñ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.", lang), reply_markup=keyboard.messages(lang))
        orderdb.add_order(client_id = client_id, destination = str(destination),latitude=location[0],longitude=location[1],client_latitude=client_coord[0],client_longitude=client_coord[1],datetime=datetime_str)
    else:
        await client_bot.send_message(client_id, translate_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.\n\n–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", lang_client), reply_markup=keyboard.menu_client(lang_client))


async def send_order_to_nearest_clients(location_driver, location, driver_id, destination, lang_client,datetime_str, sits, bonus):
    order_datetime = datetime.strptime(datetime_str, "%Y-%m-%d %H:%M")

    # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    time_diff = (order_datetime - datetime.now()).total_seconds()
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    latitude, longitude = location_driver[0], location_driver[1]


    search_radius = 0.05 
    nearby_clients = driverdb.get_nearby_active_clients(latitude, longitude, radius=search_radius)
    if nearby_clients:
        taxiorderdb.create_order(driver_id=driver_id,destination=destination,latitude=location[0],longitude=location[1],driver_latitude=latitude,driver_longitude=longitude,pickup_time=datetime_str,sits=sits,bonus=bonus)
        order_id = taxiorderdb.get_order(driver_id)
        for client_id in nearby_clients:
            client = client_id[0]
            # –û—Ç–ø—Ä–∞–≤–∫–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤–æ–¥–∏—Ç–µ–ª—é
            lang = langdb.get_lang(client)
            await client_bot.send_message(client, await translate_text("üöñ –ù–æ–≤—ã–π –≥—Ä—É–ø–ø–æ–≤–æ–π –∑–∞–∫–∞–∑ –æ—Ç —Ç–∞–∫—Å–∏—Å—Ç–∞!\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–∏–∑—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.", lang), reply_markup=await keyboard.generate_order_menu(order_id=order_id[0],lang=lang))
    else:
        await taxi_bot.send_message(driver_id, await translate_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.\n\n–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", lang_client), reply_markup=await keyboard.menu_driver(lang_client))

def is_order_time_valid(time_order_str: str) -> bool:
    """
    —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (36 —á–∞—Å–æ–≤ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏).
    
    :param time_order_str: –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏ "YYYY-MM-DD HH:MM".
    :return: True, –µ—Å–ª–∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 36 —á–∞—Å–æ–≤ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∏–Ω–∞—á–µ False.
    """
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
        order_time = datetime.strptime(time_order_str, "%Y-%m-%d %H:%M")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        now = datetime.now()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        min_time = now
        max_time = now + timedelta(hours=36)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
        return min_time <= order_time <= max_time
    except ValueError:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        return False

async def is_order_time_valid_async(time_order_str) -> bool:
    """
    –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (36 —á–∞—Å–æ–≤ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏).
    
    :param time_order_str: –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏ "YYYY-MM-DD HH:MM".
    :return: True, –µ—Å–ª–∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 36 —á–∞—Å–æ–≤ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∏–Ω–∞—á–µ False.
    """
    return await asyncio.to_thread(is_order_time_valid, time_order_str)


def read_config():
    config = configparser.ConfigParser()
    config.read('config.ini')
    return config

def write_config(config):
    with open('config.ini', 'w') as configfile:
        config.write(configfile)



def calculate_cost(distance_km):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏.
    
    :param distance_km: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤
    :return: –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ –≤ —Ä—É–±–ª—è—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
    """

    config = configparser.ConfigParser()
    config.read('config.ini')
    cost_per_km = float(config['Pricing']['cost_per_km'])
    total_cost = distance_km * cost_per_km
    return round(total_cost)

def calculate_bonuses(total_cost):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã –±–æ–Ω—É—Å–æ–≤.

    :param total_cost: –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ –≤ —Ä—É–±–ª—è—Ö
    :return: –°—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
    """
    config = configparser.ConfigParser()
    config.read('config.ini')
    bonus_percentage = float(config['Pricing']['max_bonus_percentage'])
    return round(total_cost * (bonus_percentage / 100))

def search_place_by_address(address):
    try:
        geocoder = YandexGeocoder(api_key=YANDEX_GEOCODER_API_KEY)
        full_address = f"{address}"
        response = geocoder.coordinates(full_address)
        if response:
            lat = float(response[0])
            lon = float(response[1])
            return lat, lon
        else:
            return False
    
    except Exception as e:
        return False

def haversine_distance_sync(lat1, lon1, lat2, lon2):
    """
    Calculate the travel distance and time between two locations using Google Maps API.

    Parameters:
    - origin: str, the starting address or latitude/longitude coordinates
    - destination: str, the destination address or latitude/longitude coordinates
    - mode: str, the mode of transport. Options are 'driving', 'walking', 'bicycling', 'transit'

    Returns:
    - distance: float, the distance between origin and destination in kilometers
    """

    # Request distance matrix from Google Maps API
    gmaps = googlemaps.Client(key=GOOGLE_MAPS_API)
    origin = (lat1, lon1)
    destination = (lat2, lon2)
    result = gmaps.distance_matrix(origins=origin, destinations=destination, mode='driving')

    # Extract distance and duration from the result
    distance = result['rows'][0]['elements'][0]['distance']['value'] / 1000.0  # in kilometers
    return distance

async def haversine_distance(lat1, lon1, lat2, lon2):
    return await asyncio.to_thread(haversine_distance_sync, lat1, lon1, lat2, lon2)


def travel_time_sync(lat1, lon1, lat2, lon2):
    gmaps = googlemaps.Client(key=GOOGLE_MAPS_API)
    origin = (lat1, lon1)
    destination = (lat2, lon2)
    result = gmaps.distance_matrix(origins=origin, destinations=destination, mode='driving')

    # Extract distance and duration from the result
    duration = result['rows'][0]['elements'][0]['duration']['value'] / 60.0
    return f"{int(duration)} min"

async def travel_time(lat1, lon1, lat2, lon2):
    return await asyncio.to_thread(travel_time_sync, lat1, lon1, lat2, lon2)

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏
def is_valid_name(name: str) -> bool:
    if len(name.split()) > 3:
        return False
    if any(char.isdigit() or not char.isalpha() for char in name.replace(" ", "")):
        return False
    return True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@dp.message_handler(state=Client_Start.name)
async def client_start_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    lang = langdb.get_lang(message.from_user.id)
    await message.answer(await translate_text("–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", lang))
    await Client_Start.nickname.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞
@dp.message_handler(state=Client_Start.nickname)
async def client_start_nickname(message: types.Message, state: FSMContext):
    nickname = message.text
    if not is_valid_name(nickname):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∞–∫—Å–∏–º—É–º 3 —Å–ª–æ–≤–∞, –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ü–∏—Ñ—Ä).")
        return
    await state.update_data(nickname=nickname)
    lang = langdb.get_lang(message.from_user.id)
    await message.answer(await translate_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º.", lang), reply_markup=await menu.phone_share(lang))
    await Client_Start.phone.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(content_types=[types.ContentType.CONTACT], state=Client_Start.phone)
async def phone_client(message: types.Message, state: FSMContext):
    lang = langdb.get_lang(message.from_user.id)
    contact = message.contact
    phone_number = contact.phone_number
    await state.update_data(phone=phone_number)
    await message.answer(await translate_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏", lang), reply_markup=await menu.location(lang))
    await Client_Start.latitude_longitude.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
@dp.message_handler(content_types=[types.ContentType.LOCATION], state=Client_Start.latitude_longitude)
async def client_start_location(message: types.Message, state: FSMContext):
    latitude = message.location.latitude
    longitude = message.location.longitude
    latitude_longitude = [latitude, longitude]
    await state.update_data(latitude_longitude=latitude_longitude)